{
	// Place your Python workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	"SegmentTree": {
		"prefix": "SegmentTree",
		"body": [
			"class SegmentTree():"

			"	def __init__(self, array):"
			"		n = len(array) - 1\n"

			"		n |= n >> 1"
			"		n |= n >> 2"
			"		n |= n >> 4"
			"		n |= n >> 8"
			"		n |= n >> 16\n"

			"		n += 1\n"

			"		self.arr_len = n\n"

			"		tree = [0] * (n-1) + array + [0] * (n - len(array))"
			"		for i in range(n-2, -1, -1):"
			"			tree[i] = sum(tree[i*2 + 1: i*2 + 3])\n"

			"		self.tree = tree\n"

			"	def get_sum(self, l, r):"
			"		l += self.arr_len - 1"
			"		r += self.arr_len - 1\n"

			"		sum = 0\n"

			"		while (l <= r):\n"

			"			if ((l % 2) == 0):"
			"				sum += self.tree[l]\n"

			"				l = (l + 1 - 1) // 2"
			"			else:"
			"				l = (l - 1) // 2\n"

			"			if ((r % 2) == 1):"
			"				sum += self.tree[r]\n"

			"				r = (r - 1 - 2) // 2"
			"			else:"
			"				r = (r - 2) // 2\n"

			"		return sum\n"

			"	def update(self, i, value):\n"

			"		node = self.arr_len - 1 + i\n"

			"		self.tree[node] = value\n"

			"		while node > 0:"
			"			node = (node - 1) // 2\n"

			"			left_child = node * 2 + 1"
			"			right_child = node * 2 + 2\n"

			"			self.tree[node] = self.tree[left_child] + self.tree[right_child]\n\n\n"
		],
	}
}